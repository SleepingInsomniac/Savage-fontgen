#!/usr/bin/env python
# encoding: utf-8

import fontforge, os, os.path, yaml, sys

stream = open(sys.argv.pop(), "r")
config = yaml.load(stream)
dest = sys.argv.pop()
src = sys.argv.pop()

def _mkdir(newdir):
    if os.path.isdir(newdir):
        pass
    elif os.path.isfile(newdir):
        raise OSError("a file with the same name as the desired dir, '%s', already exists." % newdir)
    else:
        head, tail = os.path.split(newdir)
        if head and not os.path.isdir(head):
            _mkdir(head)
        if tail:
            os.mkdir(newdir)

# create an empty font in memory
font = fontforge.font()
font.fontname = config['fontname']
font.familyname = config['familyname']
font.em = config['em']

unicode = 127744 # http://www.unicode.org/charts/#symbols - Miscellaneous Symbols And Pictographs

glyphs = dict()

for root, _, files in os.walk(src):
    for f in files:
        if f[0] == '.':
            continue
        name = os.path.splitext(f)[0]
        # print unicode, " => ", name
        glyphs[name] = unicode
        glyph = font.createChar(unicode, name)
        # Import the glyph info
        glyph.importOutlines(os.path.join(src, "{}.svg".format(name)))
        glyph.width = config['glyphwidth']
        glyph.autoHint()
        glyph.autoInstr()
        unicode = unicode + 1
        print glyph.validate()

_mkdir(os.path.join(dest, 'fonts'))

with open(os.path.join(dest, 'glyphs.yaml'), 'w') as outfile:
    outfile.write( yaml.dump(glyphs) )

# Write the font from memory to a TTF file
for ext in config['formats']:
    font.generate(os.path.join(dest, 'fonts', "{}.{}".format(config['fontname'], ext)))

font.generateFeatureFile(os.path.join(dest, 'features.txt'))